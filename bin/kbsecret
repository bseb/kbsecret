#!/usr/bin/env ruby
# frozen_string_literal: true

require "kbsecret"
require "fileutils"

BUILTIN_CMDS = %w[help version commands types].freeze

EXT_PATHS = ENV["PATH"].split(File::PATH_SEPARATOR).map do |path|
  Dir[File.join(path, "kbsecret-*")]
end.flatten.uniq.freeze

EXT_CMDS = EXT_PATHS.map do |c|
  File.basename(c, File.extname(c)).sub!("kbsecret-", "")
end.freeze

FLAGS = Hash.new { |_, k| k }.update(
  "--help" => "help",
  "-h" => "help",
  "--version" => "version",
  "-v" => "version"
).freeze

ALL_CMDS = (FLAGS.keys + BUILTIN_CMDS + KBSecret::CLI::Command.command_names + EXT_CMDS).freeze

KBSECRET_HELP = <<~KBSECRET_HELP
  Usage:
    kbsecret <command> <args ...>

  Available commands:
    #{ALL_CMDS.join(", ")}

  For more information about a particular command, try:
    kbsecret help <command>
KBSECRET_HELP

def migrate_configs
  old_conf_dir = File.expand_path("~/.config/kbsecret")

  return unless Dir.exist?(old_conf_dir)

  FileUtils.cp_r File.join(old_conf_dir, "."), KBSecret::Config::CONFIG_DIR
  FileUtils.rm_rf old_conf_dir
end

def internal?(cmd)
  KBSecret::CLI::Command.command_names.include?(cmd)
end

def external?(cmd)
  EXT_CMDS.include?(cmd)
end

def builtin?(cmd)
  BUILTIN_CMDS.include?(cmd)
end

def flag?(cmd)
  FLAGS.keys.include?(cmd)
end

def normalize(cmd)
  KBSecret::Config.unalias_command(FLAGS[cmd])
end

def expand(cmd)
  return cmd if flag?(cmd) || builtin?(cmd)

  "kbsecret-#{cmd}"
end

def help(*args)
  command = normalize args.shift
  if command.nil?
    puts KBSECRET_HELP
  elsif builtin? command
    send "#{command}_help"
  elsif internal? command
    exec expand(command), "--help"
  elsif external? command
    KBSecret::CLI.die "Help is not available for external commands."
  else
    KBSecret::CLI.die "Unknown command: #{command}."
  end
end

# lol
def help_help
  puts <<~HELP_HELP
    Usage:
      kbsecret help <command>

    For a list of all commands, see:
      kbsecret help
  HELP_HELP
end

def version(*_args)
  puts <<~VERSION
    kbsecret version #{KBSecret::VERSION}.
  VERSION
end

def version_help
  puts <<~VERSION_HELP
    Usage:
      kbsecret version
  VERSION_HELP
end

def commands(*_args)
  puts ALL_CMDS.join("\n")
end

def commands_help
  puts <<~COMMANDS_HELP
    Usage:
      kbsecret commands
  COMMANDS_HELP
end

def types(*_args)
  puts KBSecret::Record.record_types.join("\n")
end

def types_help
  puts <<~TYPES_HELP
    Usage:
      kbsecret types
  TYPES_HELP
end

migrate_configs

command = normalize(ARGV.shift || "help")

args = KBSecret::Config.command_args(command) + ARGV

if builtin?(command)
  send command, *args
elsif internal?(command)
  KBSecret::CLI::Command.run! command, *args
elsif external?(command)
  exec expand(command), *args
else
  KBSecret::CLI.die "Unknown command: #{command}."
end
